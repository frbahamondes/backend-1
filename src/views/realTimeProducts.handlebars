<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Productos en Tiempo Real</title>
    <link rel="stylesheet" href="/css/styles.css"> <!-- üîó Enlace a la hoja de estilos -->
</head>
<body>
    <h1>Lista de Productos en Tiempo Real</h1>

    <!-- Contenedor donde se mostrar√°n los productos -->
    <div id="product-list" class="product-container">
        {{#each products}}
            <div class="product-card" id="product-{{_id}}">
                <strong>{{title}}</strong> - ${{price}}
                <p>{{description}}</p>
                <p><strong>Categor√≠a:</strong> {{category}}</p>
                <p><strong>Stock:</strong> {{stock}} unidades</p>
                <p><strong>Estado:</strong> {{#if status}}‚úÖ Disponible{{else}}‚ùå No disponible{{/if}}</p>
                <button class="delete-btn" onclick="eliminarProducto('{{_id}}')">üóë Eliminar</button>
            </div>
        {{/each}}
    </div>

    <!-- Formulario para agregar productos -->
    <h2>Agregar Producto</h2>
    <div class="form-container">
        <form id="product-form">
            <input type="text" id="title" placeholder="Nombre del producto" required />
            <input type="text" id="description" placeholder="Descripci√≥n" required />
            <input type="number" id="price" placeholder="Precio" required />
            <input type="text" id="code" placeholder="C√≥digo" required />

            <!-- Desplegable de categor√≠as -->
            <select id="category" required>
                <option value="Tecnolog√≠a">Tecnolog√≠a</option>
                <option value="Accesorios">Accesorios</option>
                <option value="Electrodom√©sticos">Electrodom√©sticos</option>
                <option value="Otros">Otros</option>
            </select>

            <input type="number" id="stock" placeholder="Stock" min="0" required />
            
            <label class="checkbox-container">
                <input type="checkbox" id="status" checked />
                Disponible
            </label>

            <button type="submit" class="add-btn">‚ûï Agregar Producto</button>
        </form>
    </div>

    <!-- Script para manejar WebSockets -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const productList = document.getElementById('product-list');

        // ‚úÖ Funci√≥n para obtener productos desde MongoDB
        async function cargarProductos() {
            try {
                const response = await fetch('/api/products');
                const data = await response.json();
                
                productList.innerHTML = ''; // Limpiar la lista antes de actualizarla

                data.payload.forEach(product => {
                    const div = document.createElement('div');
                    div.classList.add('product-card');
                    div.id = `product-${product._id}`;
                    div.innerHTML = `
                        <strong>${product.title}</strong> - $${product.price}
                        <p>${product.description}</p>
                        <p><strong>Categor√≠a:</strong> ${product.category}</p>
                        <p><strong>Stock:</strong> ${product.stock} unidades</p>
                        <p><strong>Estado:</strong> ${product.status ? "‚úÖ Disponible" : "‚ùå No disponible"}</p>
                        <button class="delete-btn" onclick="eliminarProducto('${product._id}')">üóë Eliminar</button>
                    `;
                    productList.appendChild(div);
                });
            } catch (error) {
                console.error('‚ùå Error al cargar productos:', error);
            }
        }

        // ‚úÖ Enviar producto al servidor cuando se env√≠a el formulario
        document.getElementById('product-form').addEventListener('submit', async function (e) {
            e.preventDefault();

            const product = {
                title: document.getElementById('title').value,
                description: document.getElementById('description').value,
                price: parseFloat(document.getElementById('price').value),
                code: document.getElementById('code').value,
                category: document.getElementById('category').value,
                stock: parseInt(document.getElementById('stock').value) || 10,
                status: document.getElementById('status').checked
            };

            try {
                const response = await fetch('/api/products', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(product)
                });

                if (response.ok) {
                    socket.emit('agregarProducto', product); // Emitir evento WebSocket
                    cargarProductos(); // Recargar productos desde la API
                    document.getElementById('product-form').reset();
                } else {
                    console.error('‚ùå Error al agregar producto');
                }
            } catch (error) {
                console.error('‚ùå Error al agregar producto:', error);
            }
        });

        // ‚úÖ Escuchar eventos de actualizaci√≥n de productos en tiempo real
        socket.on('actualizarProductos', () => {
            cargarProductos();
        });

        // ‚úÖ Enviar evento para eliminar producto
        async function eliminarProducto(id) {
            try {
                const response = await fetch(`/api/products/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    socket.emit('eliminarProducto', id); // Emitir evento WebSocket
                    cargarProductos(); // Recargar productos desde la API
                } else {
                    console.error('‚ùå Error al eliminar producto');
                }
            } catch (error) {
                console.error('‚ùå Error al eliminar producto:', error);
            }
        }

        // üîÑ Cargar productos al iniciar la p√°gina
        cargarProductos();
    </script>
</body>
</html>